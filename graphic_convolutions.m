% 9/29/2023
% Signal Processing: Graphic Convolutions


clc
clear
close all 

%{
For this project we will be convolving two inputs which are controlled by
the t1 and t2 timing vector functions, with a time step of dt. The
createAorB function takes 3 inputs, and returns a signal based on the
timing vector and whether I specify that it will use function A or B. Then,
we convolve the 2 output vectors generated by calling function A on the t1
vector and function B on the t2 vector; these output vectors lets call them
A and B. We call the manualConvolution function that I created and the
matlab convolution conv() on the two vectors A and B at multiple different
time steps. I generated two columns of subplots, in the first column, I
don't adjust the amplitude (decreasing the time step requires amplitude
correction of the output of the convolution function), on the second column
(right side) this correction is made. In figure 1 the convolution is
plotted against the time shift, whereas in figure 2 the convolution is
plotted against time.
%}
t1 = [0 0.3];
t2 = [0.5 2];
dt = [0.1, 0.05, 0.01, 0.005];
timingVector(t1,t2,dt)


function [] = timingVector(t1, t2, dts)

for index = 1:length(dts)

    times = 0.0:dts(index):1.0;

    % helper function creates a and b given the times vector
    a = createAorB(times,t1,'a');
    b = createAorB(times,t2,'b');

    % manual + matlab convolution functions
    % manualConvolution is helper function
    mConv = manualConvolution(a,b);
    convolution = conv(a,b);

    

    % column 1
    figure(1);
    subplot(length(dts),2,(2*index - 1))
    hold on
    stem(convolution,'r','filled')
    stem(mConv,'b')
    xticks(0.0:dts(index)/2:1.0)
    xticks('auto')
    ylabel('Convolution')
    xlabel('Timeshift')
    title("Time step dt = " + dts(index) + " s")
    legend('Matlab Convolution','Manual Convolution')
    hold off
    % column 2
    subplot(length(dts),2,(2*index));
    hold on
    stem(convolution*dts(index),'r','filled')
    stem(mConv*dts(index),'b')
    xticks(0.0:dts(index)/2:1.0)
    xticks('auto')
    ylabel('Convolution')
    xlabel('Timeshift')
    title("Time step dt = " + dts(index) + " s")
    legend('Matlab Convolution','Manual Convolution')
    sgtitle("Convolution vs Timeshift")
    hold off

    tconv = 0.0:dts(index):2.0;

    % figure 2
    figure(2);
    subplot(length(dts),2,(2*index - 1))
    hold on
    stem(tconv,convolution,'r','filled')
    stem(tconv,mConv,'b')
    xticks(0.0:dts(index)/2:1.0)
    xticks('auto')
    ylabel('Convolution')
    xlabel('Time (s)')
    title("Time step dt = " + dts(index) + " s")
    legend('Matlab Convolution','Manual Convolution')
    hold off
    % column 2
    subplot(length(dts),2,(2*index));
    hold on
    stem(tconv,convolution*dts(index),'r','filled')
    stem(tconv,mConv*dts(index),'b')
    xticks(0.0:dts(index)/2:1.0)
    xticks('auto')
    ylabel('Convolution')
    xlabel('Time (s)')
    title("Time step dt = " + dts(index) + " s")
    legend('Matlab Convolution','Manual Convolution')
    sgtitle("Convolution vs Time")
    hold off

end
end


function [w] = manualConvolution(ht,vt)

for index = 1:(length(ht) + length(vt) - 1)
        % u(j) and v(k-j+1)
        j = max(1,index+1-length(ht)):1:min(index,length(vt));
        w(index) = sum(vt(j).*ht(index - j + 1));
end
end


function [vector] = createAorB(times,t,letter)

t_start = t(1);
t_stop = t(2);


vector = [];

if (letter == 'a')
    value = -1;
end
if (letter == 'b')
    value = 1;
end


for index = 1:length(times)
        if (t_start <= times(index) && t_stop >= times(index))
            vector(index) = value;
        else
            vector(index) = 0;
        end
end
end

